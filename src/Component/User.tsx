import React, { createContext, useContext, useState, ReactNode, useEffect } from "react";

interface UserContextType {
  user: string | null;
  phoneNumber: string;
  cart: { productCode: string; name: string; image: string; price: number; quantity: number }[];
  login: (email: string) => void;
  logout: () => void;
  updatePhoneNumber: (newPhone: string) => void;
  addToCart: (product: { productCode: string; name: string; image: string; price: number }) => void;
  removeFromCart: (productCode: string) => void;
  updateQuantity: (productCode: string, newQuantity: number) => void;
}

const UserContext = createContext<UserContextType | undefined>(undefined);

export const UserProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<string | null>(null);
  const [phoneNumber, setPhoneNumber] = useState<string>("");
  const [cart, setCart] = useState<
    { productCode: string; name: string; image: string; price: number; quantity: number }[]
  >([]);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Login
  useEffect(() => {
    if (user) {
      fetch(`http://localhost:5000/user/${user}`)
        .then((res) => res.json())
        .then((data) => {
          setCart(data.cart);
          setPhoneNumber(data.phoneNumber || ""); // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "")
        })
        .catch((error) => console.error("‚ùå Error fetching user data:", error));
    }
  }, [user]);

  const login = (email: string) => {
    setUser(email);
  };

  const logout = () => {
    setUser(null);
    setCart([]);
    setPhoneNumber("");
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  const updatePhoneNumber = (newPhone: string) => {
    if (!user) return;

    fetch("http://localhost:5000/user/updatePhone", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email: user, phoneNumber: newPhone }),
    })
      .then((res) => res.json())
      .then((data) => {
        console.log("üìû ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:", data);
        setPhoneNumber(newPhone);
      })
      .catch((error) => console.error("‚ùå Error updating phone number:", error));
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB
  const addToCart = (product: { productCode: string; name: string; image: string; price: number }) => {
    if (!user) return;

    fetch("http://localhost:5000/cart/add", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email: user, product }),
    })
      .then((res) => res.json())
      .then((data) => setCart(data))
      .catch((error) => console.error("‚ùå Error adding to cart:", error));
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const updateQuantity = (productCode: string, newQuantity: number) => {
    if (!user) return;
    if (newQuantity <= 0) {
      removeFromCart(productCode); // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å
      return;
    }

    fetch("http://localhost:5000/cart/update", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email: user, productCode, quantity: newQuantity }),
    })
      .then((res) => res.json())
      .then((data) => setCart(data))
      .catch((error) => console.error("‚ùå Error updating cart:", error));
  };

  // ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const removeFromCart = (productCode: string) => {
    if (!user) return;

    fetch("http://localhost:5000/cart/remove", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email: user, productCode }),
    })
      .then((res) => res.json())
      .then((data) => setCart(data))
      .catch((error) => console.error("‚ùå Error removing from cart:", error));
  };

  return (
    <UserContext.Provider
      value={{ user, phoneNumber, cart, login, logout, updatePhoneNumber, addToCart, removeFromCart, updateQuantity }}
    >
      {children}
    </UserContext.Provider>
  );
};

export const useUser = (): UserContextType => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error("useUser ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô UserProvider");
  }
  return context;
};
